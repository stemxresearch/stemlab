from stemlab.core.validators.validate import ValidateArgs


def interpolation_p_terms(method) -> list[str, list]:
    valid_methods = [
        'gauss-backward',
        'gauss-forward',
        'stirling',
        'bessel',
        'laplace-everett'
    ]
    method = ValidateArgs.check_member(
        par_name='method', valid_items=valid_methods, user_input=method
    )
    if method == 'gauss-backward':
        terms = [
            '1',
            'p',
            'p * (p + 1) / 2',
            '(p - 1) * p * (p + 1) / 6',
            '(p - 1) * p * (p + 1) * (p + 2) / 24',
            '(p - 2) * (p - 1) * p * (p + 1) * (p + 2) / 120',
            '(p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) / 720',
            '(p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) / 5040',
            '(p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) * (p + 4) / 40320',
            '(p - 4) * (p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) * (p + 4) / 362880',
            '(p - 4) * (p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) * (p + 4) * (p + 5) / 3628800',
            '(p - 5) * (p - 4) * (p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) * (p + 4) * (p + 5) / 39916800',
            '(p - 5) * (p - 4) * (p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) * (p + 4) * (p + 5) * (p + 6) / 479001600',
            '(p - 6) * (p - 5) * (p - 4) * (p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) * (p + 4) * (p + 5) * (p + 6) / 6227020800',
            '(p - 6) * (p - 5) * (p - 4) * (p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) * (p + 4) * (p + 5) * (p + 6) * (p + 7) / 87178291200',
            '(p - 7) * (p - 6) * (p - 5) * (p - 4) * (p - 3) * (p - 2) * (p - 1) * p * (p + 1) * (p + 2) * (p + 3) * (p + 4) * (p + 5) * (p + 6) * (p + 7) / 1307674368000'
        ]
    elif method == 'gauss-forward':
        terms = [
            '1',
            'p',
            '(p - 1) * p / 2',
            '(p - 1) * p * (p + 1) / 6',
            '(p - 1) * (p - 2) * p * (p + 1) / 24',
            '(p - 1) * (p - 2) * p * (p + 2) * (p + 1) / 120',
            '(p - 1) * (p - 2) * (p - 3) * p * (p + 2) * (p + 1) / 720',
            '(p - 1) * (p - 2) * (p - 3) * p * (p + 2) * (p + 3) * (p + 1) / 5040',
            '(p - 1) * (p - 2) * (p - 3) * (p - 4) * p * (p + 3) * (p + 2) * (p + 1) / 40320',
            '(p - 1) * (p - 2) * (p - 3) * (p - 4) * p * (p + 3) * (p + 4) * (p + 2) * (p + 1) / 362880',
            '(p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * p * (p + 4) * (p + 3) * (p + 2) * (p + 1) / 3628800',
            '(p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * p * (p + 4) * (p + 5) * (p + 3) * (p + 2) * (p + 1) / 39916800',
            '(p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * p * (p + 5) * (p + 4) * (p + 3) * (p + 2) * (p + 1) / 479001600',
            '(p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * p * (p + 5) * (p + 6) * (p + 4) * (p + 3) * (p + 2) * (p + 1) / 6227020800',
            '(p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * (p - 7) * p * (p + 6) * (p + 5) * (p + 4) * (p + 3) * (p + 2) * (p + 1) / 87178291200',
            '(p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * (p - 7) * p * (p + 6) * (p + 7) * (p + 5) * (p + 4) * (p + 3) * (p + 2) * (p + 1) / 1307674368000'
        ]
    elif method == 'stirling':
        terms = [
            '1',
            'p',
            'p ** 2 / 2',
            'p * (p ** 2 - 1 ** 2) / 6',
            'p ** 2 * (p ** 2 - 1 ** 2) / 24',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) / 120',
            'p ** 2 * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) / 720',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) / 5040',
            'p ** 2 * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) / 40320',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) / 362880',
            'p ** 2 * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) / 3628800',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) * (p ** 2 - 5 ** 2) / 39916800',
            'p ** 2 * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) * (p ** 2 - 5 ** 2) / 479001600',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) * (p ** 2 - 5 ** 2) * (p ** 2 - 6 ** 2) / 6227020800',
            'p ** 2 * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) * (p ** 2 - 5 ** 2) * (p ** 2 - 6 ** 2) / 87178291200',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) * (p ** 2 - 5 ** 2) * (p ** 2 - 6 ** 2) * (p ** 2 - 7 ** 2) / 1307674368000',
        ]
    elif method == 'bessel':
        terms = [
            '1',
            '(p-1/2)',
            '( p * (p - 1) )/2',
            '( (p - 1) * p * (p-1/2) )/6',
            '( (p + 1) * p * (p - 1) * (p - 2) )/24',
            '( (p + 1) * p * (p-1/2) * (p - 1) * (p - 2) )/120',
            '( (p + 2) * (p + 1) * p * (p - 1) * (p - 1/2) * (p - 2) )/720',
            '( (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 1/2) )/5040',
            '( (p + 3) * (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 1/2) )/40320',
            '( (p + 3) * (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 1/2) )/362880',
            '( (p + 4) * (p + 3) * (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 1/2) )/3628800',
            '( (p + 4) * (p + 3) * (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 1/2) )/39916800',
            '( (p + 5) * (p + 4) * (p + 3) * (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * (p - 1/2) )/479001600',
            '( (p + 5) * (p + 4) * (p + 3) * (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * (p - 7) * (p - 1/2) )/6227020800',
            '( (p + 6) * (p + 5) * (p + 4) * (p + 3) * (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * (p - 7) * (p - 8) * (p - 1/2) )/87178291200',
            '( (p + 6) * (p + 5) * (p + 4) * (p + 3) * (p + 2) * (p + 1) * p * (p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * (p - 7) * (p - 8) * (p - 9) * (p - 1/2) )/1307674368000'
        ]
    elif method == 'laplace-everett':
        terms_q = [
            'q',
            'q * (q ** 2 - 1 ** 2)/6',
            'q * (q ** 2 - 1 ** 2) * (q ** 2 - 2 ** 2)/120',
            'q * (q ** 2 - 1 ** 2) * (q ** 2 - 2 ** 2) * (q ** 2 - 3 ** 2)/5040',
            'q * (q ** 2 - 1 ** 2) * (q ** 2 - 2 ** 2) * (q ** 2 - 3 ** 2) * (q ** 2 - 4 ** 2)/362880',
            'q * (q ** 2 - 1 ** 2) * (q ** 2 - 2 ** 2) * (q ** 2 - 3 ** 2) * (q ** 2 - 4 ** 2) * (q ** 2 - 5 ** 2)/9916800',
            'q * (q ** 2 - 1 ** 2) * (q ** 2 - 2 ** 2) * (q ** 2 - 3 ** 2) * (q ** 2 - 4 ** 2) * (q ** 2 - 5 ** 2) * (q ** 2 - 6 ** 2)/6227020800',
            'q * (q ** 2 - 1 ** 2) * (q ** 2 - 2 ** 2) * (q ** 2 - 3 ** 2) * (q ** 2 - 4 ** 2) * (q ** 2 - 5 ** 2) * (q ** 2 - 6 ** 2) * (q ** 2 - 7 ** 2)/1307674368000'
        ]
        terms_p = [
            'p',
            'p * (p ** 2 - 1 ** 2)/6',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2)/120',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2)/5040',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2)/362880',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) * (p ** 2 - 5 ** 2)/9916800',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) * (p ** 2 - 5 ** 2) * (p ** 2 - 6 ** 2)/6227020800',
            'p * (p ** 2 - 1 ** 2) * (p ** 2 - 2 ** 2) * (p ** 2 - 3 ** 2) * (p ** 2 - 4 ** 2) * (p ** 2 - 5 ** 2) * (p ** 2 - 6 ** 2) * (p ** 2 - 7 ** 2)/1307674368000',
        ]
        terms = [terms_q, terms_p]
    
    return terms